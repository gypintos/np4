			 +-------------------------+
		     |		CS 140	           |
		     | PROJECT 4: FILE SYSTEMS |
		     |	   DESIGN DOCUMENT     |
		     +-------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Yi Wen <wen.yi1@husky.neu.edu>
Feifei Guo <feitwo@ccs.neu.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

		     INDEXED AND EXTENSIBLE FILES
		     ============================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

>> A2: What is the maximum size of a file supported by your inode
>> structure?  Show your work.

---- SYNCHRONIZATION ----

>> A3: Explain how your code avoids a race if two processes attempt to
>> extend a file at the same time.

>> A4: Suppose processes A and B both have file F open, both
>> positioned at end-of-file.  If A reads and B writes F at the same
>> time, A may read all, part, or none of what B writes.  However, A
>> may not read data other than what B writes, e.g. if B writes
>> nonzero data, A is not allowed to see all zeros.  Explain how your
>> code avoids this race.

>> A5: Explain how your synchronization design provides "fairness".
>> File access is "fair" if readers cannot indefinitely block writers
>> or vice versa.  That is, many processes reading from a file cannot
>> prevent forever another process from writing the file, and many
>> processes writing to a file cannot prevent another process forever
>> from reading the file.

---- RATIONALE ----

>> A6: Is your inode structure a multilevel index?  If so, why did you
>> choose this particular combination of direct, indirect, and doubly
>> indirect blocks?  If not, why did you choose an alternative inode
>> structure, and what advantages and disadvantages does your
>> structure have, compared to a multilevel index?

			    SUBDIRECTORIES
			    ==============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

Add isdir member to dir_entry to indicate that if it is a directory
struct dir_entry 
  {
  	....
    bool isdir;                         /* Directory or not */
    ...

  };

Add two member: one is a poiter to the directory, the other indicates that
if it is a directory
struct file_desc {
  ...
  struct dir *dir_ptr;        
  bool isdir;                 
  ...
};

Initial size of directory entry
#define SIZE_DIR 24

---- ALGORITHMS ----

>> B2: Describe your code for traversing a user-specified path.  How
>> do traversals of absolute and relative paths differ?
We parse the user-specifed path case by case:
if it start with '/', then this path will be absolute path, we will 
start from root directory, then token by token to check if that token 
is a valid subdirectory. Once the token represent a invalid directory,
we quit

if it start with '.', then this path will start from current directory,
check each token represent a valid directory which is similar to above 
description.

if it start with '..', we will first check if it has a valid parent directory,
then token by token to check if it represent a valid directory.

for token like '..' we will first check if parent directory exist, then
go up one level.


---- SYNCHRONIZATION ----

>> B4: How do you prevent races on directory entries?  For example,
>> only one of two simultaneous attempts to remove a single file
>> should succeed, as should only one of two simultaneous attempts to
>> create a file with the same name, and so on.

We use inode lock for that directory to avoid race condition on modifying
directory.


>> B5: Does your implementation allow a directory to be removed if it
>> is open by a process or if it is in use as a process's current
>> working directory?  If so, what happens to that process's future
>> file system operations?  If not, how do you prevent it?

We do not allow this happen. To prevent it, we check open count member of
the inode of that directory, if this member is greate than 1, it can't be deleted

---- RATIONALE ----

>> B6: Explain why you chose to represent the current directory of a
>> process the way you did.

			     BUFFER CACHE
			     ============

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

Cache element of cache talbe
	struct cache_elem {
		block_sector_t secId;
		void *ch_addr;	
		bool isDirty;					
		bool isUsed;				
		unsigned pin_cnt;			
		struct hash_elem buf_hash_elem;	
		struct hash_elem evic_buf_hash_elem;	
	};

Cache hash table
	struct hash struct hash buf_ht;

Lock of cash table
	struct hash buf_ht;

Bitmap to manage cache usage
	struct bitmap *c_map;

lock for c_map
	struct lock c_map_lock;

Hash iterator for buf_ht
	struct hash_iterator c_it;


Condition variable for available cahce element
	struct condition cond_pin;

Buffer size of block
	#define BUF_SIZE_BLOCK 64

Buffer size of page
	#define BUF_SIZE_PAGE

Eviction hash table that contains cache element from buf_ht
	struct hash evic_buf_ht;

Variable for clock hand algorithm
	void *buf_clock_curr;
	void *buf_clock_min;
	void *buf_clock_max;

List of pre read sector as a FIFO queue
	struct list pre_read_que;
 
Elem of pre_read_que  
	struct pre_read_elem {
		block_sector_t sec_id;		
		struct list_elem elem;
	};	

Lock for pre_read_que
	struct lock pre_read_lock;

Condition variable for pre_read_que
	struct condition pre_read_cond;	

---- ALGORITHMS ----

>> C2: Describe how your cache replacement algorithm chooses a cache
>> block to evict.

We use clock algorithm to choose cache block to evict. In each step,
we check the status of the cache block: written, used by thread, number 
of accesed time and etc. Base on these variable, we select or move on to
the next element. If there is no available cache block to be evicted, 
then wait for contition variable to be greater than 0

>> C3: Describe your implementation of write-behind.

Modification of file result dirty member of that cache element ot be true. 
Also the file meta data cheanges. Nothing more until cache eviction function or
file system finish procedure is invoked. At that time, modified cache block 
will be written back to disk

>> C4: Describe your implementation of read-ahead.
A thread pool was allocated for pre read threads. Every time when there is a 
task to read/write some sector from/to disk, the sector behind last sector read, will 
be read in and store as a element in pre_read_que. It make a signal to the thread
pool for which thread needed.

---- SYNCHRONIZATION ----

>> C5: When one process is actively reading or writing data in a
>> buffer cache block, how are other processes prevented from evicting
>> that block?

The member pin_cnt will help to prevent cache block from evictiong. 
Everytime when cache data is accessed, the pin_cnt member will be incrementd. 
cache block which has pin_cnt more that 0 will not be evicted.

>> C6: During the eviction of a block from the cache, how are other
>> processes prevented from attempting to access the block?

Cache element will be deleted from cache table once it is chosen, which make 
it unreachable from other process.

---- RATIONALE ----

>> C7: Describe a file workload likely to benefit from buffer caching,
>> and workloads likely to benefit from read-ahead and write-behind.

For buffer caching, if a process will repeatedly modify data in one sector,
it will benefit from using buffer caching. All change to that file will write 
to buffer cache until the cahce block is being evicted. This save a lot of time
for sector reading/write on disk.

For read_ahead, if a task is to write some data to a file, it is likely that 
it will need the next sector for accessing. read-ahead at this time will be useful
since the sector is already loaded in advance.

For write-behind, some task may just modify few changes to a file, in this case,
write hehind decreate the overhead of write sector to disk and read it back again in
a short time period.



			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students in future quarters?

>> Any other comments?
